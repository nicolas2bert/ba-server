// Code generated by go-swagger; DO NOT EDIT.

package ui

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	"github.com/nicolas2bert/ba-server/apiv1/auth"
)

// GetPhotosHandlerFunc turns a function with the right signature into a get photos handler
type GetPhotosHandlerFunc func(GetPhotosParams, *auth.PrincipalBA) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPhotosHandlerFunc) Handle(params GetPhotosParams, principal *auth.PrincipalBA) middleware.Responder {
	return fn(params, principal)
}

// GetPhotosHandler interface for that can handle valid get photos params
type GetPhotosHandler interface {
	Handle(GetPhotosParams, *auth.PrincipalBA) middleware.Responder
}

// NewGetPhotos creates a new http.Handler for the get photos operation
func NewGetPhotos(ctx *middleware.Context, handler GetPhotosHandler) *GetPhotos {
	return &GetPhotos{Context: ctx, Handler: handler}
}

/*GetPhotos swagger:route GET /photos/{id} ui getPhotos

Returns list of photos

*/
type GetPhotos struct {
	Context *middleware.Context
	Handler GetPhotosHandler
}

func (o *GetPhotos) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPhotosParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *auth.PrincipalBA
	if uprinc != nil {
		principal = uprinc.(*auth.PrincipalBA) // this is really a auth.PrincipalBA, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetPhotosOKBodyItems0 get photos o k body items0
// swagger:model GetPhotosOKBodyItems0
type GetPhotosOKBodyItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this get photos o k body items0
func (o *GetPhotosOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPhotosOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPhotosOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetPhotosOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
